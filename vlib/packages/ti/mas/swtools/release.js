
  utils.importFile("src/CcasereadVersion.js");
  /* Copy Module */
  var copy = xdc.loadCapsule('ti/mas/swtools/Copy.xs');

  /* Read the Package Name */
  
  var xmlTree= xdc.loadXML(".\\package\\package.bld.xml");
  if(xmlTree == undefined)
  { 
     print("Could not load the XML file, Please rebuild the package and try"); 
     java.lang.System.exit(1);
  }
  else
  {
    var argsName= xmlTree.@name;  
  }

/* Get the Version */
var warningBuffer = new Array();
var value=readVersion(argsName);
var moduleName=argsName.split(".");
var packageName=moduleName[moduleName.length-1];
value=value.toString().replace(/\s/g, "");
value2=value.toString().replace(/\,/g, ".");
value1=value.toString().replace(/\./g, "_");
var srcFile = "docs\\doxygen\\html\\index.html"; 
var modFile = "docs\\doxygen\\html\\"+packageName+"_"+value1+returnQualityString(argsName)+"_release_notes.html";
var dstFile = packageName+"_"+value1+returnQualityString(argsName)+"_release_notes.html";
var matchstring = packageName+"_"+value1;
var fileExists = xdc.findFile(".\\"+dstFile);
var date=new java.util.Date();
var months = new Array('January','February','March', 'April','May','June','July','August','September', 'October','November','December');

    /* copy the environment array from the current environment */
    var env   = java.lang.System.getenv();
    var keys  = env.keySet().toArray();
    var key;
    var stat={};
    var env_j=[];
    for (var i = 0; i < keys.length; i++) {
         key = keys[i];
      if (env.get(key) == "") {
             continue;
         }
         env_j = env_j.concat([key + '=' + env.get(key)]);
     }
   var attrs = {
        envs: env_j
   }
 
  var command;

var fileModule = xdc.module('xdc.services.io.File');
var openedFile;
try{
   openedFile = fileModule.open(srcFile, "r");
 } catch (ex)
 {
   print(srcFile + " cannot be read");
 }

var writeFile;
try{
   writeFile = fileModule.open(modFile, "w");
 } catch (ex)
 {
   print(modFile + " cannot be written to. Please check Writing Permissions.");
 }

 var readLine;
 while((readLine=openedFile.readLine()) != null)
 {
   if(readLine.match("Main Page"))
   {
      readLine=readLine.replace(/Main Page/,packageName.toString().toUpperCase()+" "+ value2+returnQualityString(argsName).replace("_"," ")+" Release Notes");
   } 
   if(readLine.match("<!-- Generated by Doxygen 1.5.1-p1 -->"))
   {
         writeFile.writeLine(readLine);
         readLine = "<h1 align=\"center\"><a name=\"XDC_TOP\"><\/a>"+ packageName.toString().toUpperCase()+" "+ value2+returnQualityString(argsName).replace("_"," ")+" Release Notes"+"<\/h1>";
         writeFile.writeLine(readLine);
         readLine="<h2 align=\"center\">"+ months[date.getMonth()]+" "+ date.getDate()+", "+(date.getYear()+1900)+"<\/h2>";
    } 
   if(readLine.match("tilogo.gif"))
   {
      readLine=readLine.replace(/tilogo.gif/,"docs/relnotes_archive/tilogo.gif");
   }
  if(readLine.match("titagline.gif"))
   {
      readLine=readLine.replace(/titagline.gif/,"docs/relnotes_archive/titagline.gif");
   }
   writeFile.writeLine(readLine);
 }

 var dirExists = xdc.findFile("./docs/relnotes_archive");
 if(!dirExists)
   {

   var relDir = new java.io.File("./docs/relnotes_archive");
   if(!(relDir.exists() && relDir.isDirectory()))
     {

   
      print("Creating relnotes_archive Directory.....");      
      relDir.mkdirs();     
      
      /* Copy titagline.gif */
      copy.File("docs/doxygen/tmp/titagline.gif","docs/relnotes_archive");

      /* Copy tilogo.gif */
      copy.File("docs/doxygen/tmp/tilogo.gif","docs/relnotes_archive");   
	  
	  command="git add ../docs/"+packageName+"/docs/relnotes_archive";
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("fatal:") )
      {
            print(stat.output);
			java.lang.System.exit(1);
          
      } 
    }   

            
   }
/* Check if file differs only in quality */
if(!fileExists)
{
   var file = new java.io.File(".");
   var list = file.list();
   var i, j;
   for (i = 0, j = 0; i < list.length; i++) {
     if (list[i].match("_release_notes.html") != null && list[i].match("_release_notes.html.") == null) {
     
      if(list[i].match(matchstring)|| list[i].match("beta") || list[i].match("alpha") || list[i].match("prealpha"))
      {
      
      command="git mv -f "+list[i]+" "+ dstFile;   
      print(command);
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("fatal:") )
      {
         print(stat.output);
         java.lang.System.exit(1);
         
      }         
      fileExists=true; 
      
      }
     }
    }
      
 }
   

if(!fileExists)
{
  /* Move old Release notes under release_archive
     1) Check if there is relnotes_archive under docs directory.
     2) If not create relnotes_archive directory and add it to source control.
     3) Move the old release notes under relnotes_archive directory
  */
     
 
   var file = new java.io.File(".");
   var list = file.list();
   var i, j;
   for (i = 0, j = 0; i < list.length; i++) {
     if (list[i].match("_release_notes.html") != null && list[i].match("_release_notes.html.") == null) {
      
      
      command="git.exe mv "+list[i]+" docs\\relnotes_archive\\"+list[i];
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("fatal:") )
      {
         print(stat.output);
         java.lang.System.exit(1);
      } 
      /* Modify the old release notes for the relative address */
      var oldReleaseFile = "docs\\relnotes_archive\\"+list[i];
     

    var openedFile;
    try{
       openedFile = fileModule.open(oldReleaseFile, "r");
    } catch (ex)
    {
        print(srcFile + " cannot be read");
     }

    var writeFile;
    try{
        writeFile = fileModule.open("docs\\relnotes_archive\\temp.html", "w");
    } catch (ex)
    {
        print(modFile + " cannot be written to. Please check Writing Permissions.");
    }

   var readLine
   while((readLine=openedFile.readLine()) != null)
   {
      if(readLine.match("\=\"docs\/"))
      {
         readLine=readLine.replace(/docs/,"..");
         
      } 
      writeFile.writeLine(readLine);
    }
	openedFile.close();
	writeFile.close();

    
  java.io.File(oldReleaseFile)["delete"]();
   copy.Move("docs\\relnotes_archive\\temp.html",oldReleaseFile);
   

   command="git add "+ oldReleaseFile;
      xdc.exec(command,attrs,stat);
      if( (stat.output).match("fatal:") )
      {
          
             print(stat.output);
             java.lang.System.exit(1);
          
      } 
  
   java.io.File("docs\\relnotes_archive\\temp.html")["delete"]();
   
  }
 }

 
  /*Copy New Release notes */
  copy.Move(modFile,dstFile);

  


  
 
  /* Add the release notes to the source control */
  command="git.exe add "+dstFile;
  xdc.exec(command,attrs,stat);
  if( (stat.output).match("fatal:") )
  {
    
       print(stat.output);
       java.lang.System.exit(1);
    
  } 
 
}
else
{
 /* file exists replace the current file */
  print(dstFile+" Exists"); 
  
  /* copy */
 copy.Move(modFile,dstFile);

 command = "git.exe add "+dstFile;
  xdc.exec(command,attrs,stat);
  if( (stat.output).match("fatal:") )
  {
    
       print(stat.output);
       java.lang.System.exit(1);
    
  } 

  
}












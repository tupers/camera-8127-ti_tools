* ======================================================================== *
*  TEXAS INSTRUMENTS, INC.                                                 *
*                                                                          *
*  IMGLIB-2  DSP Image/Video Processing Library                            *
*                                                                          *
*      Release:        Revision 2.0.1                                      *
*      Snapshot date:  6-May-2008                                          *
*                                                                          *
*  This library contains proprietary intellectual property of Texas        *
*  Instruments, Inc.  The library and its source code are protected by     *
*  various copyrights, and portions may also be protected by patents or    *
*  other legal protections.                                                *
*                                                                          *
*  This software is licensed for use with Texas Instruments TMS320         *
*  family DSPs.  This license was provided to you prior to installing      *
*  the software.  You may review this license by consulting the file       *
*  TI_license.PDF which accompanies the files in this library.             *
* ------------------------------------------------------------------------ *
*          Copyright (C) 2008 Texas Instruments, Incorporated.             *
*                          All Rights Reserved.                            *
* ======================================================================== *
* ========================================================================= *
*   TEXAS INSTRUMENTS, INC.                                                 *
*                                                                           *
*   NAME                                                                    *
*       wave_vert : Vertical Pass of Wavelet Transform                      *
*                                                                           *
*   USAGE                                                                   *
*       This routine is C-callable and can be called as:                    *
*                                                                           *
*       void wave_vert                                                      *
*       (                                                                   *
*           const short *restrict                                           *
*                       *restrict in_data,   /* Array of row pointers */    *
*           const short *restrict qmf,       /* Low pass QMF filter   */    *
*           const short *restrict mqmf,      /* High pass QMF filter  */    *
*           short       *restrict out_ldata, /* Low pass output data  */    *
*           short       *restrict out_hdata, /* High pass output data */    *
*           int cols                     /* Length of rows to process */    *
*       );                                                                  *
*                                                                           *
*                                                                           *
*   DESCRIPTION                                                             *
*       The benchmark performs the vertical pass of 2D wavelet              *
*       transform It performs a vertical filter on 8 rows which are         *
*       pointed to by the pointers contained in an array of pointers.       *
*       It produces two lines worth of output, one being the low-pass       *
*       and the other being the high pass result. Instead of performing     *
*       a transpose on the column and re-using the wave_horz kernel,        *
*       the vertical filter is traversed over the entire width of the       *
*       line and the low pass and high pass filtering kernels are           *
*       performed together.                                                 *
*                                                                           *
*       This implies that the low-pass and highpass filters be              *
*       overlapped in execution so that the input data array may be         *
*       loaded once and both filters can be exceuted in parallel.           *
*                                                                           *
*   TECHNIQUES                                                              *
*       The inner loop that advances along each filter tap is totally       *
*       optimized by unrolling.  Double-word loads are performed, and       *
*       paired multiplies are used to perform four iterations of            *
*       low-pass filter in parallel.                                        *
*                                                                           *
*       For the high-pass kernel, the same loop is reused, in order         *
*       to save codesize.  This is done by loading the filter               *
*       coefficients in a special order.                                    *
*                                                                           *
*   ASSUMPTIONS                                                             *
*       Since the wavelet transform is dyadic, the image dimensions         *
*       "rows" and "cols" are assumed to be powers of 2.  No checking       *
*       is done within the code to ensure this.                             *
*                                                                           *
*       The input filters qmf and mqmf are assumed to be word aligned       *
*       and have exactly 8 taps.                                            *
*                                                                           *
*       The output data and input data on any line is assumed to be         *
*       dword-aligned.                                                      *
*                                                                           *
*       The mqmf filter is constructed from the qmf as follows:             *
*                                                                           *
*           status = -1;                                                    *
*           for (i = 0; i < M; i++)                                         *
*           {                                                               *
*               status = status * -1;                                       *
*               hdata  = qmf[i] * status;                                   *
*               filter[i] = hdata;                                          *
*           }                                                               *
*                                                                           *
*       The kernels assume that the number of filter taps is exactly        *
*       8.  In addition data that is loaded for producing out_ldata[0]      *
*       and out_hdata[0] is not identical. The data loaded for              *
*       producing out_hdata[0] produces results at the location             *
*                                                                           *
*           out_lstart = o_im + ((rows >> 1) - 3) * cols                    *
*           out_hstart = o_im + (rows >> 1) * cols                          *
*                                                                           *
*       Where o_im is start of output image, rows is # of rows of the       *
*       input image, and cols is # of cols of the output image.             *
*                                                                           *
*       The following table illustrates how ylptr and yhptr need to be      *
*       updated at the start of each call to this function:                 *
*                                                                           *
*       Call#        out_ldata                  out_hdata                   *
*         1          out_lstart                 out_hstart                  *
*         2          out_lstart + cols          out_hstart + cols           *
*         3          out_lstart + 2*cols        out_hstart + 2*cols         *
*                                                                           *
*       At this point ylptr wraps around to become o_im, while yhptr        *
*       proceeds as usual:                                                  *
*                                                                           *
*         4          o_im                       out_hstart + 3*cols         *
*                                                                           *
*       In addition the kernel accepts a pointer to an array of             *
*       pointers for each input line so that a working buffer of 10         *
*       lines can be used to effectively mix DMA's and processing as        *
*       shown below:                                                        *
*                                                                           *
*       ihptr                        LINE BUFFER                            *
*       ptr0   ---->|-------------------------------------------------|     *
*       ptr1   ---->|-------------------------------------------------|     *
*       ...                                                                 *
*       ptr7   ---->|-------------------------------------------------|     *
*                                                                           *
*       At the start of the kernel 8 input lines are filled to the          *
*       first 8 lines and processing begins.  In the background the next    *
*       two lines are fetched.  The pointers are moved up by 2 namely       *
*       ptr[i] = ptr[i+2] and the last two lines now point to lines 9       *
*       and 10 and processing starts again.  In the background the next     *
*       two lines are brought in the first two lines of the line            *
*       buffer.  Pointers move up again by 2 but now the last two           *
*       pointers to line 0 and 1.  This pattern then repeats.               *
*                                                                           *
*       The first line to begin filtering is always obtained from           *
*       ptr[0], the next from ptr[1] and so on.                             *
*                                                                           *
*   MEMORY NOTE                                                             *
*       In order to eliminate bank conflicts succesive lines in the         *
*       line buffer or the pointers to these lines are seperated by         *
*       exactly two banks (one word) so that loads to any succesive         *
*       lines may be parallelized together.                                 *
*                                                                           *
*       This code is a LITTLE ENDIAN implementation.                        *
*                                                                           *
*   C CODE                                                                  *
*       void wave_vert                                                      *
*       (                                                                   *
*           const short *restrict                                           *
*                       *restrict in_data,   /* Array of row pointers */    *
*           const short *restrict qmf,       /* Low pass QMF filter   */    *
*           const short *restrict mqmf,      /* High pass QMF filter  */    *
*           short       *restrict out_ldata, /* Low pass output data  */    *
*           short       *restrict out_hdata, /* High pass output data */    *
*           int cols                     /* Length of rows to process */    *
*       )                                                                   *
*       {                                                                   *
*           const int M = 8;                                                *
*           int            i, iters, j;                                     *
*           int            sum_h, sum_l;                                    *
*           int            prod_h, prod_l;                                  *
*                                                                           *
*           short          res_h, res_l;                                    *
*           short          xdata, hdata, ldata;                             *
*           short          *filt_ptr;                                       *
*                                                                           *
*           /* ------------------------------------------------------ */    *
*           /*  iters: variable for the # of loop iterations.         */    *
*           /*                                                        */    *
*           /*  Both the low pass and the high pass filters produce   */    *
*           /*  'iters' points, which is also the width of the input  */    *
*           /*  line.  The low-pass filter reads filter coefficients  */    *
*           /*  from qmf and the high pass filter reads filter        */    *
*           /*  coefficients from the conjugate mirror filter. In     */    *
*           /*  addition note that the low-pass filter coefficients   */    *
*           /*  are read in increasing order while the high pass the  */    *
*           /*  filter coefficients are read in the opposite order.   */    *
*           /* ------------------------------------------------------ */    *
*           iters = cols;                                                   *
*                                                                           *
*           /* ------------------------------------------------------ */    *
*           /*  Since the filters have fractional point coefficients, */    *
*           /*  all math is done using Q15 fixed-point arithmetic.    */    *
*           /*  Qr is the associated round value and is set as        */    *
*           /*  follows:                                              */    *
*           /*                                                        */    *
*           /*      #define Qpt 15                                    */    *
*           /*      #define Qr 16384                                  */    *
*           /*                                                        */    *
*           /*  Low-Pass filter: ihptr contains 8 pointers which      */    *
*           /*  point to input lines. The filters are placed          */    *
*           /*  vertically and input data is read from 8 seperate     */    *
*           /*  lines. Hence data-reuse is not possible when          */    *
*           /*  traversing horizontally. sum_l is initialized to Qr   */    *
*           /*  and contains the low-pass FIR sum at the end of the   */    *
*           /*  j loop. sum_h contains the accumulator result for     */    *
*           /*  the high pass filter in a similar fashion.  M is      */    *
*           /*  assumed to be 8 by all kernels and is # filter taps   */    *
*           /*  for D4.                                               */    *
*           /* ------------------------------------------------------ */    *
*                                                                           *
*           for ( i = 0; i < iters; i++)                                    *
*           {                                                               *
*               sum_l    = Qr;                                              *
*               filt_ptr = qmf;                                             *
*                                                                           *
*               for ( j = 0; j < M; j++)                                    *
*               {                                                           *
*                   xdata   =  in_data[j][i];                               *
*                   ldata   =  *filt_ptr++;                                 *
*                   prod_l  =  xdata * ldata;                               *
*                   sum_l  +=  prod_l;                                      *
*               }                                                           *
*                                                                           *
*               res_l    = (sum_l >> Qpt);                                  *
*               *out_ldata++ = res_l;                                       *
*           }                                                               *
*                                                                           *
*           /* ------------------------------------------------------ */    *
*           /*  High-Pass filter:  ihptr contains 8 pointers which    */    *
*           /*  point to input lines.  The filters are placed         */    *
*           /*  vertically and input data is read from 8 seperate     */    *
*           /*  lines.  Hence data-reuse is not possible when         */    *
*           /*  traversing horizontally.  sum_h is initialized to     */    *
*           /*  Qr and contains the low-pass FIR sum at the end of    */    *
*           /*  the j loop.  sum_h contains the accumulator result    */    *
*           /*  for the high pass filter in a similar fashion.  M     */    *
*           /*  is # filter taps and is assumed to be 8 by all        */    *
*           /*  kernels.                                              */    *
*           /* ------------------------------------------------------ */    *
*           for ( i = 0; i < iters; i++)                                    *
*           {                                                               *
*               sum_h    = Qr;                                              *
*               filt_ptr = mqmf + M - 1;                                    *
*                                                                           *
*               for ( j = 0; j < M; j++)                                    *
*               {                                                           *
*                   xdata   =  in_data[j][i];                               *
*                   hdata   =  *filt_ptr--;                                 *
*                   prod_h  =  xdata * hdata;                               *
*                   sum_h  +=  prod_h;                                      *
*               }                                                           *
*                                                                           *
*               res_h    = (sum_h >> Qpt);                                  *
*               *out_hdata++ = res_h;                                       *
*           }                                                               *
*       }                                                                   *
*                                                                           *
*   BIBLIOGRAPHY                                                            *
*       Mallat, Stephane. "A Wavelet Tour of Signal Processing", pg. 309.   *
* ------------------------------------------------------------------------- *
*             Copyright (c) 2008 Texas Instruments, Incorporated.           *
*                            All Rights Reserved.                           *
* ========================================================================= *
Qr          .set      16384
            .sect ".text:psa"
	    .if     __TI_EABI__
          		 .asg    IMG_wave_vert, _IMG_wave_vert
            .endif
            .global _IMG_wave_vert

_IMG_wave_vert:  .cproc A_ihptr, B_qmf, A_filter, B_ylptr, A_yhptr, A_x
            .no_mdep

            ; regs before loopl

            .reg B_ihptr,   A_in0ptr, B_in1ptr
            .reg A_in2ptr,  B_in3ptr, A_in4ptr
            .reg B_in5ptr,  A_in6ptr, B_in7ptr
            .reg A_qmf,     A_l10,    B_l32
            .reg A_l54,     B_l76,    A_iters
            .reg B_qr,      A_l00,    A_l11
            .reg B_l22,     B_l33,    A_l44
            .reg A_l55,     B_l66,    B_l77
            .reg B_l11,     A_l22,    B_l44
            .reg A_l66,     A_yptr,   B_jiters
            .reg B_l55,     A_qr,     B_l00
            .reg A_l33,     A_l77

            ; regs in loopl

            .reg A_xdataI8:A_xdataA0,   B_xdataJ9:B_xdataB1
            .reg A_xdataKA:A_xdataC2,   B_xdataLB:B_xdataD3
            .reg A_xdataMC:A_xdataE4,   B_xdataND:B_xdataF5
            .reg A_xdataOE:A_xdataG6,   B_xdataPF:B_xdataH7

            .reg A_prod1:A_prod0,       B_prod3:B_prod2
            .reg A_prod5:A_prod4,       B_prod7:B_prod6
            .reg A_prod9:A_prod8,       B_prodB:B_prodA
            .reg A_prodD:A_prodC,       B_prodF:B_prodE

            .reg A_mpy1:A_mpy0,         B_mpy3:B_mpy2
            .reg A_mpy5:A_mpy4,         B_mpy7:B_mpy6
            .reg A_mpy9:A_mpy8,         B_mpyB:B_mpyA
            .reg A_mpyD:A_mpyC,         B_mpyF:B_mpyE

            .reg A_prod40,    B_prod26,  A_prod8C
            .reg B_prodAE,    A_prod15,  B_prod37
            .reg A_prod9D,    B_prodBF

            .reg A_mpy40,    B_mpy26,    A_mpy8C
            .reg B_mpyAE,    A_mpy15,    B_mpy37
            .reg A_mpy9D,    B_mpyBF

            .reg A_sum0,     B_sum1,     A_sum2
            .reg B_sum3,     A_sum4,     B_sum5
            .reg A_sum6,     B_sum7,     B_sum_t0
            .reg A_sum_t1,   B_sum_t2,   A_sum_t3

            .reg B_sum_l0,   A_sum_l1,   B_sum_l2
            .reg A_sum_l3,   A_sum_l0s,  B_sum_l1s
            .reg A_sum_l2s,  B_sum_l3s
            .reg B_oword1:B_oword0


            ; regs outside loop

            .reg  B_filter, A_h10,    B_h32
            .reg  A_h54,    B_h76


            ;-------------------------------------------------------------;
            ; Make Partitioning copy of pointer and read in pointer to    ;
            ; eight seperate lines in in0ptr.....in7ptr                   ;
            ;-------------------------------------------------------------;

            MV.2x     A_ihptr,      B_ihptr   ; Partitioning move of pointer
            LDW.D1T1  *+A_ihptr[0], A_in0ptr  ; Pointer to 1st line
            LDW.D2T2  *+B_ihptr[1], B_in1ptr  ; Pointer to 2nd line
            LDW.D1T1  *+A_ihptr[2], A_in2ptr  ; Pointer to 3rd line
            LDW.D2T2  *+B_ihptr[3], B_in3ptr  ; Pointer to 4th line
            LDW.D1T1  *+A_ihptr[4], A_in4ptr  ; Pointer to 5th line
            LDW.D2T2  *+B_ihptr[5], B_in5ptr  ; Pointer to 6th line
            LDW.D1T1  *+A_ihptr[6], A_in6ptr  ; Pointer to 7th line
            LDW.D2T2  *+B_ihptr[7], B_in7ptr  ; Pointer to 8th line

            ;--------------------------------------------------------------;
            ; Make partitioning copy of lowpass filter pointer and read in ;
            ; coefficients as packed words to make use of split multiplies ;
            ; and to minimize register pressure.                           ;
            ;--------------------------------------------------------------;

            MV.1x     B_qmf,       A_qmf      ; Partitioning move of pointer
            LDW.D1T1  *+A_qmf[0],  A_l10      ; Paired l10 read l1 | l0
            LDW.D2T2  *+B_qmf[1],  B_l32      ; Paired l32 read l3 | l2
            LDW.D1T1  *+A_qmf[2],  A_l54      ; Paired l54 read l5 | l4
            LDW.D2T2  *+B_qmf[3],  B_l76      ; Paired l76 read l7 | l6

            PACK2.1    A_l10,      A_l10,   A_l00    ; Packed l0
            PACKH2.1   A_l10,      A_l10,   A_l11    ; Packed l1
            PACK2.2    B_l32,      B_l32,   B_l22    ; Packed l2
            PACKH2.2   B_l32,      B_l32,   B_l33    ; Packed l3
            PACK2.1    A_l54,      A_l54,   A_l44    ; Packed l4
            PACKH2.1   A_l54,      A_l54,   A_l55    ; Packed l5
            PACK2.2    B_l76,      B_l76,   B_l66    ; Packed l6
            PACKH2.2   B_l76,      B_l76,   B_l77    ; Packed l7

            MV.2x      A_l11,      B_l11             ; Part. move
            MV.1x      B_l22,      A_l22             ; Part. move
            MV.2x      A_l44,      B_l44             ; Part. move
            MV.1x      B_l66,      A_l66             ; Part. move
            MV.2x      A_l55,      B_l55             ; Part. move

            MVKL.2     Qr,         B_qr              ; Round factor for Q15
            MVKH.2     Qr,         B_qr              ; Round factor for Q15
            MV.1x      B_qr,       A_qr              ; Round factor

            MV.1x      B_ylptr,    A_yptr            ; Partitioning move
            MVK.2      2,          B_jiters          ;
            MV.2x      A_filter,   B_filter          ;

LOOPJ:      .trip 2,2,2

            SHRU.1    A_x,         2,       A_iters  ; iters = x >> 2
            SUB.1     A_iters,     2,       A_iters  ;

            .mptr   A_in0ptr, in  + 0, 8   ; Assume succesive lines are
            .mptr   B_in1ptr, in  + 8, 8   ; one dword apart so that loads
            .mptr   A_in2ptr, in  + 0, 8   ; to succesivelines may
            .mptr   B_in3ptr, in  + 8, 8   ; parallelize. This allows the
            .mptr   A_in4ptr, in  + 0, 8   ; stores to be performed on
            .mptr   B_in5ptr, in  + 8, 8   ; seperate cycles without
            .mptr   A_in6ptr, in  + 0, 8   ; bank conflicts
            .mptr   B_in7ptr, in  + 8, 8   ; 8 extra dwords of space are
            .mptr   A_yptr,   out + 0, 8   ; needed

LOOPL:      .trip  2

            LDDW.D1T1   *A_in0ptr++, A_xdataI8:A_xdataA0
            LDDW.D2T1   *B_in1ptr++, B_xdataJ9:B_xdataB1
            LDDW.D1T1   *A_in2ptr++, A_xdataKA:A_xdataC2
            LDDW.D2T2   *B_in3ptr++, B_xdataLB:B_xdataD3
            LDDW.D1T1   *A_in4ptr++, A_xdataMC:A_xdataE4
            LDDW.D2T2   *B_in5ptr++, B_xdataND:B_xdataF5
            LDDW.D1T1   *A_in6ptr++, A_xdataOE:A_xdataG6
            LDDW.D2T2   *B_in7ptr++, B_xdataPF:B_xdataH7

            MPY2.1      A_xdataA0,  A_l00,   A_prod1:A_prod0   ; 9
            MPY2.2      B_xdataB1,  B_l11,   B_prod3:B_prod2   ; 10
            MPY2.1      A_xdataC2,  A_l22,   A_prod5:A_prod4   ; 11
            MPY2.2      B_xdataD3,  B_l33,   B_prod7:B_prod6   ; 12

            MPY2.1      A_xdataE4,  A_l44,   A_prod9:A_prod8   ; 13
            MPY2.2      B_xdataF5,  B_l55,   B_prodB:B_prodA   ; 14
            MPY2.1      A_xdataG6,  A_l66,   A_prodD:A_prodC   ; 15
            MPY2.2      B_xdataH7,  B_l77,   B_prodF:B_prodE   ; 16

            MPY2.1      A_xdataI8,  A_l00,   A_mpy1:A_mpy0     ; 17
            MPY2.2      B_xdataJ9,  B_l11,   B_mpy3:B_mpy2     ; 18
            MPY2.1      A_xdataKA,  A_l22,   A_mpy5:A_mpy4     ; 19
            MPY2.2      B_xdataLB,  B_l33,   B_mpy7:B_mpy6     ; 20

            MPY2.1      A_xdataMC,  A_l44,   A_mpy9:A_mpy8     ; 21
            MPY2.2      B_xdataND,  B_l55,   B_mpyB:B_mpyA     ; 22
            MPY2.1      A_xdataOE,  A_l66,   A_mpyD:A_mpyC     ; 23
            MPY2.2      B_xdataPF,  B_l77,   B_mpyF:B_mpyE     ; 24

            ADD.1       A_prod0,    A_prod4,     A_prod40      ; 25
            ADD.2       B_prod2,    B_prod6,     B_prod26      ; 26
            ADD.1       A_prod8,    A_prodC,     A_prod8C      ; 27
            ADD.2       B_prodA,    B_prodE,     B_prodAE      ; 28

            ADD.1       A_prod1,    A_prod5,     A_prod15      ; 29
            ADD.2       B_prod3,    B_prod7,     B_prod37      ; 30
            ADD.1       A_prod9,    A_prodD,     A_prod9D      ; 31
            ADD.2       B_prodB,    B_prodF,     B_prodBF      ; 32

            ADD.1       A_mpy0,     A_mpy4,      A_mpy40       ; 33
            ADD.2       B_mpy2,     B_mpy6,      B_mpy26       ; 34
            ADD.1       A_mpy8,     A_mpyC,      A_mpy8C       ; 35
            ADD.2       B_mpyA,     B_mpyE,      B_mpyAE       ; 36

            ADD.1       A_mpy1,     A_mpy5,      A_mpy15       ; 37
            ADD.2       B_mpy3,     B_mpy7,      B_mpy37       ; 38
            ADD.1       A_mpy9,     A_mpyD,      A_mpy9D       ; 39
            ADD.2       B_mpyB,     B_mpyF,      B_mpyBF       ; 40

            ADD.1       A_prod40,   A_prod8C,    A_sum0        ; 41
            ADD.2       B_prod26,   B_prodAE,    B_sum1        ; 42
            ADD.2x      A_sum0,     B_sum1,      B_sum_t0      ; 43

            ADD.1       A_prod15,   A_prod9D,    A_sum2        ; 44
            ADD.2       B_prod37,   B_prodBF,    B_sum3        ; 45
            ADD.1x      A_sum2,     B_sum3,      A_sum_t1      ; 46

            ADD.1       A_mpy40,    A_mpy8C,     A_sum4        ; 47
            ADD.2       B_mpy26,    B_mpyAE,     B_sum5        ; 48
            ADD.2x      A_sum4,     B_sum5,      B_sum_t2      ; 49

            ADD.1       A_mpy15,    A_mpy9D,     A_sum6        ; 50
            ADD.2       B_mpy37,    B_mpyBF,     B_sum7        ; 51
            ADD.1x      A_sum6,     B_sum7,      A_sum_t3      ; 52

            ADD.2       B_qr,       B_sum_t0,    B_sum_l0      ; 53
            ADD.1       A_qr,       A_sum_t1,    A_sum_l1      ; 54
            ADD.2       B_qr,       B_sum_t2,    B_sum_l2      ; 55
            ADD.1       A_qr,       A_sum_t3,    A_sum_l3      ; 56

            SHR.1x      B_sum_l0,   15,          A_sum_l0s     ; 57
            SHR.2x      A_sum_l1,   15,          B_sum_l1s     ; 58
            SHR.1x      B_sum_l2,   15,          A_sum_l2s     ; 59
            SHR.2x      A_sum_l3,   15,          B_sum_l3s     ; 60

            PACK2.2x    B_sum_l1s,  A_sum_l0s,   B_oword0      ; 61
            PACK2.2x    B_sum_l3s,  A_sum_l2s,   B_oword1      ; 62

            STDW.D1T2   B_oword1:B_oword0,   *A_yptr++         ; 63
            BDEC.1      LOOPL,   A_iters                       ; 64


            MV.1x       B_ihptr,  A_ihptr                      ; Reload

            LDW.D1T1   *+A_ihptr[0],  A_in0ptr                 ; Reload pointer
            LDW.D2T2   *+B_ihptr[1],  B_in1ptr                 ; Reload pointer
            LDW.D1T1   *+A_ihptr[2],  A_in2ptr                 ; Reload pointer
            LDW.D2T2   *+B_ihptr[3],  B_in3ptr                 ; Reload pointer
            LDW.D1T1   *+A_ihptr[4],  A_in4ptr                 ; Reload pointer
            LDW.D2T2   *+B_ihptr[5],  B_in5ptr                 ; Reload pointer
            LDW.D1T1   *+A_ihptr[6],  A_in6ptr                 ; Reload pointer
            LDW.D2T2   *+B_ihptr[7],  B_in7ptr                 ; Reload pointer

            MV.1x      B_filter,      A_filter                 ; Load highpass

            LDW.D1T1   *+A_filter[0],  A_h10                   ; Load h10
            LDW.D2T2   *+B_filter[1],  B_h32                   ; Load h32
            LDW.D1T1   *+A_filter[2],  A_h54                   ; Load h54
            LDW.D2T2   *+B_filter[3],  B_h76                   ; Load x76

            PACKH2.2   B_h76,          B_h76,        B_l00     ;
            PACK2.2    B_h76,          B_h76,        B_l11     ;
            PACKH2.1   A_h54,          A_h54,        A_l22     ;
            PACK2.1    A_h54,          A_h54,        A_l33     ;
            PACKH2.2   B_h32,          B_h32,        B_l44     ;
            PACK2.2    B_h32,          B_h32,        B_l55     ;
            PACKH2.1   A_h10,          A_h10,        A_l66     ;
            PACK2.1    A_h10,          A_h10,        A_l77     ;

            MV.1x      B_l00,          A_l00                   ; Part. move
            MV.2x      A_l33,          B_l33                   ; Part. move
            MV.1x      B_l44,          A_l44                   ;
            MV.2x      A_l77,          B_l77                   ;
            MV.1       A_yhptr,        A_yptr                  ; Part. move

[B_jiters]  SUB.2      B_jiters,     1,             B_jiters
[B_jiters]  B.2        LOOPJ

            .return
            .endproc

* ========================================================================= *
*   End of file:  wave_vert_p.sa                                            *
* ------------------------------------------------------------------------- *
*             Copyright (c) 2008 Texas Instruments, Incorporated.           *
*                            All Rights Reserved.                           *
* ========================================================================= *

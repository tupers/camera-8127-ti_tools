* ======================================================================== *
*  TEXAS INSTRUMENTS, INC.                                                 *
*                                                                          *
*  IMGLIB-2  DSP Image/Video Processing Library                            *
*                                                                          *
*      Release:        Revision 2.0.1                                      *
*      Snapshot date:  6-May-2008                                          *
*                                                                          *
*  This library contains proprietary intellectual property of Texas        *
*  Instruments, Inc.  The library and its source code are protected by     *
*  various copyrights, and portions may also be protected by patents or    *
*  other legal protections.                                                *
*                                                                          *
*  This software is licensed for use with Texas Instruments TMS320         *
*  family DSPs.  This license was provided to you prior to installing      *
*  the software.  You may review this license by consulting the file       *
*  TI_license.PDF which accompanies the files in this library.             *
* ------------------------------------------------------------------------ *
*          Copyright (C) 2008 Texas Instruments, Incorporated.             *
*                          All Rights Reserved.                            *
* ======================================================================== *
* ===========================================================================*
*   NAME                                                                     *
*       IMG_median_3x3_16: 3x3 median filter on un-signed 16-bit data.       *
*                                                                            *
*   USAGE                                                                    *
*       This routine is C-callable and can be called as:                     *
*                                                                            *
*       void IMG_median_3x3_16                                               *
*            (                                                               *
*                const unsigned short *restrict i_data, // Input image       *
*                int n,                                 // Length of input   *
*                unsigned short      *restrict o_data   // Output image      *
*            )                                                               *
*                                                                            *
*   DESCRIPTION                                                              *
*       This kernel performs a 3x3 median filter operation on 16-bit         *
*       unsigned values.  The median filter comes under the class            *
*       of non-linear signal processing algorithms.                          *
*                                                                            *
*       Rather than replace the grey level at a pixel by a weighted          *
*       average of the nine pixels including and surrounding it, the         *
*       grey level at each pixel is replaced by the median of the nine       *
*       values.  The median of a set of nine numbers is the middle           *
*       element so that half of the elements in the list are larger and      *
*       half are smaller.  Median filters remove the effects of extreme      *
*       values from data, such as salt and pepper noise, although using      *
*       a wide may result in unacceptable blurring of sharp edges in         *
*       the original image.                                                  *
*                                                                            *
*   C CODE                                                                   *
*       The following is a C code description of the algorithm without       *
*       restrictions.  The optimized implementations may have                *
*       restrictions, as noted under the "ASSUMPTIONS" below.                *
*                                                                            *
*       void IMG_median_3x3_16                                               *
*       (                                                                    *
*           const unsigned short *restrict i_data,                           *
*           int n,                                                           *
*           unsigned short       *restrict o_data                            *
*       )                                                                    *
*       {                                                                    *
*           unsigned short c0h, c1h, c2h; /* "hi",  columns 0..2 */          *
*           unsigned short c0m, c1m, c2m; /* "mid", columns 0..2 */          *
*           unsigned short c0l, c1l, c2l; /* "lo",  columns 0..2 */          *
*           unsigned short h_min;         /* "min" */                        *
*           unsigned short m_mid;         /* "mid" */                        *
*           unsigned short l_max;         /* "max" */                        *
*           unsigned short m_h, m_l, t, out;                                 *
*                                                                            *
*           int i;                                                           *
*                                                                            *
*           /* ---------------------------------------------------- */       *
*           /*  Start off with a well-defined initial state.        */       *
*           /* ---------------------------------------------------- */       *
*           c1h = c2h = c1m = c2m = c1l = c2l = 0x7FFF;                      *
*                                                                            *
*           /* ---------------------------------------------------- */       *
*           /*  Iterate over the input row.                         */       *
*           /* ---------------------------------------------------- */       *
*           for (i = 0; i < n; i++)                                          *
*           {                                                                *
*               /* ------------------------------------------------ */       *
*               /*  Slide the two previous columns of sorted        */       *
*               /*  pixels over by 1.                               */       *
*               /* ------------------------------------------------ */       *
*               c0h = c1h;    c1h = c2h;                                     *
*               c0m = c1m;    c1m = c2m;                                     *
*               c0l = c1l;    c1l = c2l;                                     *
*                                                                            *
*               /* ------------------------------------------------ */       *
*               /*  Load in a new column of pixels, and sort into   */       *
*               /*  low, medium, high.                              */       *
*               /* ------------------------------------------------ */       *
*               c2h = i_data[i      ];                                       *
*               c2m = i_data[i +   n];                                       *
*               c2l = i_data[i + 2*n];                                       *
*                                                                            *
*               if (c2l > c2h) { t = c2l; c2l = c2h; c2h = t; }              *
*               if (c2l > c2m) { t = c2l; c2l = c2m; c2m = t; }              *
*               if (c2m > c2h) { t = c2m; c2m = c2h; c2h = t; }              *
*                                                                            *
*               /* ------------------------------------------------ */       *
*               /*  Find the minimum value of the "hi" terms.       */       *
*               /* ------------------------------------------------ */       *
*               h_min = c2h;                                                 *
*               if (c1h < h_min) { h_min = c1h; }                            *
*               if (c0h < h_min) { h_min = c0h; }                            *
*                                                                            *
*               /* ------------------------------------------------ */       *
*               /*  Find the middle value of the "mid" terms.       */       *
*               /* ------------------------------------------------ */       *
*               m_l   = c0m;                                                 *
*               m_mid = c1m;                                                 *
*               m_h   = c2m;                                                 *
*                                                                            *
*               if (m_l   > m_h  ) { t = m_l; m_l = m_h; m_h = t; }          *
*               if (m_l   > m_mid) { m_mid = m_l; }                          *
*               if (m_mid > m_h  ) { m_mid = m_h; }                          *
*                                                                            *
*               /* ------------------------------------------------ */       *
*               /*  Find the maximum value of the "lo" terms.       */       *
*               /* ------------------------------------------------ */       *
*               l_max = c2l;                                                 *
*               if (c1l > l_max) { l_max = c1l; }                            *
*               if (c0l > l_max) { l_max = c0l; }                            *
*                                                                            *
*               /* ------------------------------------------------ */       *
*               /*  Find the middle value of "h_min", "m_mid",      */       *
*               /*  "l_max" into "out".                             */       *
*               /* ------------------------------------------------ */       *
*               out = m_mid;                                                 *
*                                                                            *
*               if (h_min > l_max) { t=h_min; h_min = l_max; l_max=t; }      *
*               if (h_min > out  ) { out = h_min; }                          *
*               if (out   > l_max) { out = l_max; }                          *
*                                                                            *
*               /* ------------------------------------------------ */       *
*               /*  Store the resulting pixel.                      */       *
*               /* ------------------------------------------------ */       *
*               o_data[i] = out;                                             *
*           }                                                                *
*       }                                                                    *
*                                                                            *
*   TECHNIQUES                                                               *
*       This implementation uses an incremental sorting technique to         *
*       greatly reduce the number of compares and exchanges necessary        *
*       to sort the image pixels.                                            *
*                                                                            *
*       The main loop reads three new pixels from the input image each       *
*       iteration.  These three pixels form the right edge of the filter     *
*       mask.  The filter data from the previous iteration is "slid          *
*       over" by one pixel to form the complete 3x3 mask.                    *
*                                                                            *
*       As 3-pixel is read in from the image, the pixels are sorted,         *
*       resulting in a "lo", "medium" and "hi" pixel value for that          *
*       column.  The result is that the filter mask is sorted into           *
*       three rows -- a row of "minimums", a row of "middle values",         *
*       and a row of "maximums".                                             *
*                                                                            *
*       The median filter operates from this partially ordered mask.         *
*       It finds the smallest element in the row of "maximums",              *
*       the middle element in the row of "middle values", and                *
*       the largest element in the row of "minimums".  The median            *
*       value of these three values is the median for the entire 3x3         *
*       mask.                                                                *
*                                                                            *
*       This process minimizes compares, as the whole mask does not          *
*       need to be sorted between iterations.  Rather, the partial           *
*       ordering for two of the three columns from one iteration is          *
*       used directly for the next iteration.                                *
*                                                                            *
*   ASSUMPTIONS                                                              *
*       The length 'n' must be a multiple of four.                           *
*                                                                            *
*    MEMORY NOTE                                                             *
*       - No bank conflicts occur                                            * 
*       - No alignment restrictions on input/output buffers.                 *
*                                                                            *
*    CYCLES                                                                  *
*        cycles = n * 14 / 4 + 79                                            *
*        for n = 256, cycles = 975                                           *
* -------------------------------------------------------------------------- *
*            Copyright (c) 2008 Texas Instruments, Incorporated.             *
*                           All Rights Reserved.                             *
* ========================================================================== *

        .sect ".text:IMG_median_3x3_16"
        .if     __TI_EABI__
          		 .asg    IMG_median_3x3_16, _IMG_median_3x3_16
        .endif
        .global _IMG_median_3x3_16
_IMG_median_3x3_16: .cproc  ptr_in, n,  ptr_out
        .no_mdep
		.reg	line0
		.reg	line1
		.reg	line2
		.reg	x0100
		.reg	x1110
		.reg	x2120
		.reg	i
		.reg	x0_32:x0_10
		.reg	x1_32:x1_10
		.reg	x2_32:x2_10
		.reg	x1_10_a
		.reg	x1_32_a
		.reg	x2_10_a
		.reg	x2_32_a
		.reg	x0_10_b
		.reg	x0_32_b
		.reg	x1_10_b
		.reg	x1_32_b
		.reg	x2_10_c
		.reg	x2_32_c
		.reg	x1_32_c
		.reg	x1_10_c
		.reg	step0u
		.reg	step0l
		.reg	step1u
		.reg	step1l
		.reg	minmax0
		.reg	minmax1
		.reg	sstep0u
		.reg	sstep0l
		.reg	sstep1u
		.reg	sstep1l
		.reg	minmed0
		.reg	minmed1
		.reg	maxmed0
		.reg	maxmed1
		.reg	medmed0
		.reg	medmed1
		.reg	stepp0u
		.reg	stepp0l
		.reg	minmaxmed0
		.reg	minmaxmed1
		.reg	maxmin0
		.reg	maxmin1
		.reg	maxmedmin0
		.reg	maxmedmin1
		.reg	hpr0
		.reg	hpr1
		.reg	minmedmin0
		.reg	minmedmin1
		.reg	jadi0
		.reg	jadi1
		.reg	jjadi1:jjadi0
		.reg	tempZ
		.reg	tempZ1
		.reg	tempZ2
		.reg	x1_10_temp
		.reg	x1_10_temp1
		.reg	x1_10_temp2
		.reg	x1_10_temp3
		.reg	x1_32_temp
		.reg	x1_32_temp1
		.reg	x1_32_temp2
		.reg	x1_32_temp3
		.reg	jadi0_temp
		.reg	jadi0_temp1
		.reg	jadi0_temp2
		.reg	jadi0_temp3
		.reg	jadi1_temp
		.reg	jadi1_temp1
		.reg	jadi1_temp2
		.reg	jadi1_temp3
		.reg	x0_10_b_temp
		.reg	x0_10_b_temp1
		.reg	x0_10_b_temp2
		.reg	x0_10_b_temp3
		.reg	x0_32_b_temp
		.reg	x0_32_b_temp1
		.reg	x0_32_b_temp2
		.reg	x0_32_b_temp3
		.reg	x1_10_c_temp
		.reg	x1_10_c_temp1
		.reg	x1_10_c_temp2
		.reg	x1_10_c_temp3
		.reg	x1_32_c_temp
		.reg	x1_32_c_temp1
		.reg	x1_32_c_temp2
		.reg	x1_32_c_temp3
		.reg	maxmedmin0_temp
		.reg	maxmedmin0_temp1
		.reg	maxmedmin0_temp2
		.reg	maxmedmin0_temp3
		.reg	maxmedmin1_temp
		.reg	maxmedmin1_temp1
		.reg	maxmedmin1_temp2
		.reg	maxmedmin1_temp3

*==============================================================================*
		 SHL	n, 1, tempZ
         ADD   	ptr_in,	tempZ, 	line1
         ADD   	line1, 	tempZ,  line2

		; well known initial values
		; half of 65535, then substract by 0x8000 
		;(because no unsinged operations exists)

		 MVKL  	0xffff, 	x0100				
		 MVKLH 	0xffff, 	x0100				
		 MV	    x0100,		x1110
		 MV		x0100,		x2120

		 MVKL	0x8000,	tempZ
	     MVKLH	0x8000,	tempZ

		; counter
         SHRU	n,    2,   i	
         SUB 	i,    2,   i	
loop:
		;-------------------------------------------
		;load data --> double word
		;-------------------------------------------

		LDNDW 	*ptr_in++,      x0_32:x0_10			; line 1  
		LDNDW 	*line1++,      x1_32:x1_10			; line 2			
		LDNDW 	*line2++,      x2_32:x2_10			; line 3			

		; input data - 0x8000
		; changing frome unsinged to signed

		XOR		x0_10,	tempZ,	x0_10 
		XOR  	x0_32,	tempZ,	x0_32
		XOR  	x1_10,	tempZ,	x1_10
		XOR  	x1_32,	tempZ,	x1_32
		XOR  	x2_10,	tempZ,	x2_10
		XOR  	x2_32,	tempZ,	x2_32

		; ------------------------------------------------------------
		;	sorting 3 elements
		; ----------------------

		CMPGT2	x2_10, 	x1_10,	x1_10_temp			  	
		CMPGT2	x2_32,	x1_32,	x1_32_temp			

		XPND2	x1_10_temp,	x1_10_temp1				
		XPND2	x1_32_temp,	x1_32_temp1				

		AND		x2_10,	x1_10_temp1,	x1_10_temp2	
		AND		x2_32,	x1_32_temp1,	x1_32_temp2	
                     	            
		ANDN	x1_10,	x1_10_temp1,	x1_10_temp3	
		ANDN	x1_32,	x1_32_temp1,	x1_32_temp3	

		OR		x1_10_temp2,x1_10_temp3,	x1_10_a	
		OR		x1_32_temp2,x1_32_temp3,	x1_32_a	

		; ----------------------
		;	max line 2 & 3
		; ----------------------

		MIN2	x2_10,	x1_10,	x2_10_a			; minimum between line 1,2
		MIN2	x2_32,	x1_32,	x2_32_a


		MAX2	x0_10,	x1_10_a,	x0_10_b		; max of all
		MAX2	x0_32,	x1_32_a,	x0_32_b		; max of all

;---------------------------------------------------------------------------

		MIN2	x0_10,	x1_10_a,	x1_10_b		; 
		MIN2	x0_32,	x1_32_a,	x1_32_b

;---------------------------------------------------------------------------

		CMPGT2	x2_10_a, 	x1_10_b,	x1_10_c_temp
		CMPGT2	x2_32_a, 	x1_32_b,	x1_32_c_temp

		XPND2	x1_10_c_temp,	x1_10_c_temp1
		XPND2	x1_32_c_temp,	x1_32_c_temp1

		AND		x2_10_a,	x1_10_c_temp1,	x1_10_c_temp2
		AND		x2_32_a,	x1_32_c_temp1,	x1_32_c_temp2
                                           
		ANDN	x1_10_b,	x1_10_c_temp1,	x1_10_c_temp3
		ANDN	x1_32_b,	x1_32_c_temp1,	x1_32_c_temp3

		OR		x1_10_c_temp2,	x1_10_c_temp3, x1_10_c
		OR		x1_32_c_temp2,	x1_32_c_temp3, x1_32_c


;---------------------------------------------------------------------------

		MIN2	x2_10_a,	x1_10_b,	x2_10_c		; min of all
		MIN2	x2_32_a,	x1_32_b,	x2_32_c		; min of all

	  	;-------------------------------------------
  		; find 4 mins among maxes --> minmax
  		;-------------------------------------------

  		PACKLH2	x0_10_b, 	x0100,		step0l			
		PACKLH2	x0_32_b,	x0_10_b,	step0u			
  		MIN2	x0100,		step0l,		step1l			
		MIN2	x0_10_b,	step0u,		step1u			
  		MIN2	step1l,		x0_10_b,	minmax0		
		MIN2	step1u,		x0_32_b,	minmax1		

  		;-------------------------------------------
  		; find 4 maxes among mins --> maxmin
  		;-------------------------------------------

  		PACKLH2	x2_10_c,	x2120,		sstep0l
		PACKLH2	x2_32_c,	x2_10_c,	sstep0u	
  		MAX2   	sstep0l,	x2120,		sstep1l
		MAX2   	sstep0u,	x2_10_c,	sstep1u
  		MAX2   	sstep1l,	x2_10_c,	maxmin0
		MAX2   	sstep1u,	x2_32_c,	maxmin1

	  	;-------------------------------------------
	  	;find 4 meds among mend --> medmed
	  	;-------------------------------------------
  	
	  	PACKLH2	x1_10_c,	x1110,		stepp0l
		PACKLH2	x1_32_c,	x1_10_c,	stepp0u
  		MAX2	stepp0l,	x1110,		maxmed0
		MAX2	stepp0u,	x1_10_c,	maxmed1
		MIN2	stepp0l,	x1110,		minmed0		
   		MIN2	stepp0u,	x1_10_c,	minmed1		
  		MIN2	maxmed0,	x1_10_c,	minmaxmed0
		MIN2	maxmed1,	x1_32_c,	minmaxmed1
  		MAX2	minmed0,	minmaxmed0,	medmed0
		MAX2	minmed1,	minmaxmed1,	medmed1

  		;-------------------------------------------
  		;	final med of medians..
  		;-------------------------------------------

		CMPGT2	maxmin0,	medmed0,	maxmedmin0_temp
		CMPGT2	maxmin1,	medmed1,	maxmedmin1_temp

		XPND2	maxmedmin0_temp, maxmedmin0_temp1
		XPND2	maxmedmin1_temp, maxmedmin1_temp1

		AND		maxmin0,	maxmedmin0_temp1,	maxmedmin0_temp2
		AND		maxmin1,	maxmedmin1_temp1,	maxmedmin1_temp2
                                                
		ANDN	medmed0,	maxmedmin0_temp1,	maxmedmin0_temp3
		ANDN	medmed1,	maxmedmin1_temp1,	maxmedmin1_temp3

		OR		maxmedmin0_temp2,	maxmedmin0_temp3,	maxmedmin0
		OR		maxmedmin1_temp2,	maxmedmin1_temp3,	maxmedmin1

		MIN2	maxmin0,	medmed0,	minmedmin0
		MIN2	maxmin1,	medmed1,	minmedmin1

		MIN2	maxmedmin0,	minmax0,	hpr0
		MIN2	maxmedmin1,	minmax1,	hpr1
		
		CMPGT2	hpr0,	minmedmin0,	jadi0_temp					
		CMPGT2	hpr1,	minmedmin1,	jadi1_temp					

		XPND2	jadi0_temp,	jadi0_temp1							
		XPND2	jadi1_temp,	jadi1_temp1							

		AND		hpr0,		jadi0_temp1,	jadi0_temp2		
		AND		hpr1,		jadi1_temp1,	jadi1_temp2		
                            
		ANDN	minmedmin0,	jadi0_temp1,	jadi0_temp3			
		ANDN	minmedmin1,	jadi1_temp1,	jadi1_temp3			

		OR		jadi0_temp2,	jadi0_temp3,	jadi0			
		OR		jadi1_temp2,	jadi1_temp3,	jadi1			


		;-------------------------------------------
		;	next loop initial values	
		;-------------------------------------------

		MV		x0_32_b,		x0100
		MV		x1_32_c,		x1110
		MV		x2_32_c,		x2120

		XOR	jadi0,	tempZ, jjadi0
		XOR	jadi1,	tempZ,	jjadi1

		STNDW  jjadi1:jjadi0,      *ptr_out++
		
		BDEC   loop,            i
*==============================================================================*
            .return
            .endproc


* ======================================================================== *
*   End of file, "IMG_median_3x3_16.sa"                                    *
* ------------------------------------------------------------------------ *
*            Copyright (c) 2008 Texas Instruments, Incorporated.           *
*                           All Rights Reserved.                           *
* ======================================================================== *



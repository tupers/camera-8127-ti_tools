* ======================================================================== *
*  TEXAS INSTRUMENTS, INC.                                                 *
*                                                                          *
*  IMGLIB-2  DSP Image/Video Processing Library                            *
*                                                                          *
*      Release:        Revision 2.0.1                                      *
*      Snapshot date:  6-May-2008                                          *
*                                                                          *
*  This library contains proprietary intellectual property of Texas        *
*  Instruments, Inc.  The library and its source code are protected by     *
*  various copyrights, and portions may also be protected by patents or    *
*  other legal protections.                                                *
*                                                                          *
*  This software is licensed for use with Texas Instruments TMS320         *
*  family DSPs.  This license was provided to you prior to installing      *
*  the software.  You may review this license by consulting the file       *
*  TI_license.PDF which accompanies the files in this library.             *
* ------------------------------------------------------------------------ *
*          Copyright (C) 2008 Texas Instruments, Incorporated.             *
*                          All Rights Reserved.                            *
* ======================================================================== *
* ========================================================================== *
*   NAME                                                                     *
*       IMG_errdif_bin_16: Floyd-Steinberg Error Diffusion for 16 bit data   *
*                                                                            *
*   USAGE                                                                    *
*       This routine is C-callable and can be called as:                     *
*                                                                            *
*   void IMG_errdif_bin_16                                                   *
*   (                                                                        *
*       unsigned short *restrict errdif_data,                                *
*       int                      cols,                                       *
*       int                      rows,                                       *
*       short          *restrict err_buf,                                    *
*       unsigned short           thresh                                      *
*   )                                                                        *
*                                                                            *
*      errdif_data:     Input/Output image ptr                               *
*      cols:            Number of columns (Width)                            *
*      rows:            Number of rows    (Height)                           *
*      err_buf[cols+1]: Buffer where one row of errors is to be saved        *
*      thresh:          Threshold in the range [0x00, 0xFF]                  *
*                                                                            *
*   DESCRIPTION                                                              *
*                                                                            *
*      The code implements the Binary Floyd-Steinberg error diffusion        *
*      filter.  The filter kernel used is this one:                          *
*                                                                            *
*                                  +---+                                     *
*                                P | 7 |                                     *
*                          +---+---+---+                                     *
*                          | 3 | 5 | 1 |                                     *
*                          +---+---+---+                                     *
*                                                                            *
*                                                                            *
*      Pixels are processed from left-to-right, top-to-bottom.  Each         *
*      pixel is compared against a user-defined threshold.  Pixels           *
*      that are larger than the threshold are set to 255, and pixels         *
*      that are smaller or equal to the threshold are set to 0.  The         *
*      error value for the pixel (eg. the difference between the             *
*      thresholded pixel and its original grey level) is propagated to       *
*      the neighboring pixels according to the filter above.  This           *
*      error propagation diffuses the error over a larger area, hence        *
*      the term "error diffusion."                                           *
*                                                                            *
*   MEMORY NOTE                                                              *
*      This kernel places no restrictions on the alignment of its input.     *
*                                                                            *
*      No bank conflicts occur.                                              *
*                                                                            *
*      This code assumes a LITTLE ENDIAN configuration.                      *
*                                                                            *
*   TECHNIQUES                                                               *
*      The processing of the filter itself is inverted so that the           *
*      errors from previous pixels "propagate into" a given pixel at         *
*      the time the pixel is processed, rather than "accumulate into"        *
*      a pixel as its neighbors are processed.  This allows us to            *
*      keep our image as an 8-bit image, and reduces the number of           *
*      accesses to the image array.  The inverted filter kernel              *
*      performs identically to the kernel's original form.  In this          *
*      form, the weights specify the weighting assigned to the errors        *
*      coming from the neighboring pixels.                                   *
*                                                                            *
*                          +---+---+---+                                     *
*                          | 1 | 5 | 3 |                                     *
*                          +---+---+---+                                     *
*                          | 7 | P                                           *
*                          +---+                                             *
*                                                                            *
*   ASSUMPTIONS                                                              *
*      - Input snd Output buffers do not alias.                              *
*      - 'cols' should be even                                               *
*      - 'err_buf[]' must be initialized to zeros for the first call and     *
*        the returned err_buf should be provided for the subsequent calls.   *
*                                                                            *
*  SOURCE                                                                    *
*      Floyd-Steinberg Error Diffusion.                                      *
*                                                                            *
* -------------------------------------------------------------------------- *
*            Copyright (c) 2008 Texas Instruments, Incorporated.             *
*                           All Rights Reserved.                             *
* ========================================================================== *

        .sect ".text:IMG_errdif_bin_16"
        .if     __TI_EABI__
          		 .asg    IMG_errdif_bin_16, _IMG_errdif_bin_16
        .endif
        .global _IMG_errdif_bin_16
_IMG_errdif_bin_16:    .cproc  A_rgb_r, A_w, A_y, B_errbuf0, B_thrsh
*-----------------------------  *Ushort  int  int  *short     Ushort

        .no_mdep

        .reg  A_errbuf_r, A_errbuf_w
		.reg  B_rgb_r, A_rgb_w, B_F
		.reg  A_x, B_y, B_big

        .reg  B_errA, B_errB, A_errC, B_errE
		.reg  B_eB5, A_eC3
		.reg  B_eB5A1, A_eC3F7, B_errEBAC
        .reg  B_eE7, B_F7, A_F7

        .reg  B_errSft, B_errAll
		.reg  A_errE_, A_out, B_outX

        .reg  B_k5, A_k3, B_k7, A_k7, B_neg

;------- Set up addresses and loop counters

        MV      .2X     A_rgb_r,      B_rgb_r
        SUB     .2      A_y,          1,          B_y	; colums

        MV      .1      A_rgb_r,      A_rgb_w			; x
        MVKL    .2      0x0000FFFF,        B_neg
        MVKH    .2      0x0000FFFF,        B_neg
        SHL     .2      B_neg,        12,         B_neg

        MVK     .2      5000h,        B_k5      ; 5 << 12
        MVK     .1      3000h,        A_k3      ; 3 << 12
        MVK     .2      7000h,        B_k7      ; 7 << 12

y_start:
        SUB     .1      A_w,          1,        A_x
        MV      .1X     B_errbuf0,              A_errbuf_w	; x for Write
        ADD     .1X     B_errbuf0,    2,        A_errbuf_r	; x+1 for Read
; init
        ZERO    .2      B_errA					; errA = 0;
        ZERO    .2      B_errAll
        ZERO    .1      A_F7					; errE = 0;
        LDH     .D2T2   *B_errbuf0, B_errB		; errB = err_buf[0];
        ZERO    .2      B_big

x_start: .trip 2

        LDH     .D1T1   *A_errbuf_r++,          A_errC	; errC = err_buf[x+1];
        LDHU    .D2T2   *B_rgb_r++,             B_F		; F = errdif_data[i];

        MPY     .2      B_errB,     B_k5,       B_eB5		; errB*5
        MPY     .1      A_errC,     A_k3,       A_eC3		; errC*3
        ADD     .2      B_eB5,      B_errA,     B_eB5A1		; errB*5+errA  -> 1
        ADD     .1      A_eC3,      A_F7,       A_eC3F7		; errC*3+(F7?) -> 2
        ADD     .2X     B_eB5A1,    A_eC3F7,    B_errEBAC	; _1+_2

        MPYHL   .2      B_errAll,   B_k7,       B_eE7		; errE*7
        MPY   .2      B_F,        B_k7,       B_F7		; next errE*7
        MV      .1X     B_F7,       A_F7

; (errE*7 + errA + errB*5 + errC*3)
        ADD     .2      B_errEBAC,  B_eE7,      B_errAll
 [B_big]ADD     .2      B_neg,      B_errAll,   B_errAll

        SHR     .2      B_errAll,   16 ,        B_errSft
        ADD     .2      B_errSft,   B_F,        B_errE		; errF

        CMPGT   .2      B_errE,     B_thrsh,    B_big
        SUB     .2      B_thrsh,    B_errE,     B_outX
        SHRU    .1X     B_outX,     16,         A_out
        SUB     .1X     B_errE,     A_out,      A_errE_

        STH     .D1T1   A_errE_,    *A_errbuf_w++
        STH     .D1T1   A_out,      *A_rgb_w++

        SHL     .2      B_errB,     12,         B_errA	; errA = errB;
        MV      .2X     A_errC,     B_errB				; errB = errC;

  [A_x] BDEC             x_start,   A_x,

  [B_y] BDEC             y_start,   B_y

        .return
        .endproc

* ======================================================================== *
*   End of file, "IMG_errdif_bin_16.sa"                                    *
* ------------------------------------------------------------------------ *
*            Copyright (c) 2008 Texas Instruments, Incorporated.           *
*                           All Rights Reserved.                           *
* ======================================================================== *


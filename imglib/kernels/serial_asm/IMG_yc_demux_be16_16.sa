* ======================================================================== *
*  TEXAS INSTRUMENTS, INC.                                                 *
*                                                                          *
*  IMGLIB-2  DSP Image/Video Processing Library                            *
*                                                                          *
*      Release:        Revision 2.0.1                                      *
*      Snapshot date:  6-May-2008                                          *
*                                                                          *
*  This library contains proprietary intellectual property of Texas        *
*  Instruments, Inc.  The library and its source code are protected by     *
*  various copyrights, and portions may also be protected by patents or    *
*  other legal protections.                                                *
*                                                                          *
*  This software is licensed for use with Texas Instruments TMS320         *
*  family DSPs.  This license was provided to you prior to installing      *
*  the software.  You may review this license by consulting the file       *
*  TI_license.PDF which accompanies the files in this library.             *
* ------------------------------------------------------------------------ *
*          Copyright (C) 2008 Texas Instruments, Incorporated.             *
*                          All Rights Reserved.                            *
* ======================================================================== *
* ========================================================================== *
*  NAME                                                                      *
*      IMG_yc_demux_be16_16 -- De-interleave a 4:2:2 BIG ENDIAN video        *
*                  stream into three separate LITTLE ENDIAN 16-bit planes    *
*                                                                            *
*  USAGE                                                                     *
*      This function is C callable, and is called as follows:                *
*                                                                            *
*      void IMG_yc_demux_be16_16                                             *
*      (                                                                     *
*          int n,                       // Number of luma pixels    //       *
*          const unsigned short * yc,   // Interleaved luma/chroma  //       *
*          short *restrict y,           // Luma plane (16-bit)      //       *
*          short *restrict cr,          // Cr chroma plane (16-bit) //       *
*          short *restrict cb           // Cb chroma plane (16-bit) //       *
*      );                                                                    *
*                                                                            *
*      The input array 'yc' is expected to be an interleaved 4:2:2           *
*      video stream.  The input is expected in BIG ENDIAN byte order         *
*      within each 4-byte word.  This is consistent with reading the         *
*      video stream from a word-oriented BIG ENDIAN device while the         *
*      C6000 device is in a LITTLE ENDIAN configuration.                     *
*                                                                            *
*      In other words, the expected pixel order is:                          *
*                                                                            *
*                  Word 0           Word 1          Word 2                   *
*             +---------------+---------------+---------------+--            *
*       Byte# | 0   1   2   3 | 4   5   6   7 | 8   9  10  11 |...           *
*             |  cb0      y1  |  cr0      y0  |  cb1     y2   |...           *
*             +---------------+---------------+---------------+--            *
*                                                                            *
*      The output arrays 'y', 'cr', and 'cb' are expected to not             *
*      overlap.  The de-interleaved pixels are written as half-words         *
*      in LITTLE ENDIAN order.                                               *
*                                                                            *
*  DESCRIPTION                                                               *
*      This function reads the halfword-oriented pixel data, zero-extends    *
*      it, and then writes it to the appropriate result array.  Both         *
*      the luma and chroma values are expected to be unsigned.               *
*                                                                            *
*      The data is expected to be in an order consistent with reading        *
*      byte oriented data from a word-oriented peripheral that is            *
*      operating in BIG ENDIAN mode, while the CPU is in LITTLE ENDIAN       *
*      mode.  This results in a pixel ordering which is not                  *
*      immediately obvious.  This function correctly reorders the            *
*      pixel values so that further processing may proceed in LITTLE         *
*      ENDIAN mode.                                                          *
*                                                                            *
*  ASSUMPTIONS                                                               *
*      Input and output arrays are double-word aligned.                      *
*      The input must be a multiple of 16 luma pixels long.                  *
*                                                                            *
*  TECHNIQUES                                                                *
*      The loop has been unrolled a total of 16 times to allow for           *
*      processing 8 pixels in each datapath.                                 *
*                                                                            *
*      Double-word loads and stores maximize memory bandwidth                *
*      utilization.                                                          *
*                                                                            *
*  CYCLES                                                                    *
*      cycles = 4 * (num_luma / 8) + 10.                                     *
*      For num_luma = 1024, cycles = 522.                                    *
*                                                                            *
*      This number includes 8 cycles of function call overhead.  The         *
*      exact overhead will vary depending on compiler options used.          *
* -------------------------------------------------------------------------- *
*            Copyright (c) 2008 Texas Instruments, Incorporated.             *
*                           All Rights Reserved.                             *
* ========================================================================== *

        .sect ".text:IMG_yc_demux_be16_16"
        .if     __TI_EABI__
          		 .asg    IMG_yc_demux_be16_16, _IMG_yc_demux_be16_16
         .endif
        .global _IMG_yc_demux_be16_16
_IMG_yc_demux_be16_16: .cproc  A_n, B_yc, A_y, B_cr, A_cb

	.no_mdep

;; Register mapping
        .reg  B_yErE:B_yFbE, B_yCrC:B_yDbC
        .reg  B_yArA:B_yBbA, B_y8r8:B_y9b8
        .reg  B_rErC:B_rAr8
        .reg  B_bEbC:B_bAb8
        .reg  B_yFyE:B_yDyC
        .reg  B_yByA:B_y9y8

        .reg  A_y6r6:A_y7b6, A_y4r4:A_y5b4
        .reg  A_y2r2:A_y3b2, A_y0r0:A_y1b0
        .reg  A_r6r4:A_r2r0
        .reg  A_b6b4:A_b2b0
        .reg  A_y7y6:A_y5y4
        .reg  A_y3y2:A_y1y0

;
        .reg  B_y
        .reg  B_cb
        .reg  B_rEbE, B_rCbC, B_rAbA, B_r8b8
        .reg  B_yEyF, B_yCyD, B_yAyB, B_y8y9
        .reg  A_i
        .reg  A_yc
        .reg  A_cr
        .reg  A_r6b6, A_r4b4, A_r2b2, A_r0b0
        .reg  A_y6y7, A_y4y5, A_y2y3, A_y0y1


        SHRU    .1      A_n,        4,          A_i
        SUB     .1      A_i,        2,          A_i

        ADD     .1X     B_yc,       16,         A_yc
        ADD     .1      A_yc,       16,         A_yc
        ADD     .2X     A_y,        8,         B_y
        ADD     .2      B_y,        8,         B_y
        ADD     .1X     B_cr,       8,         A_cr
        ADD     .2X     A_cb,       8,         B_cb

        .mptr           A_yc,       yc + 16,    32
        .mptr           B_yc,       yc + 0,     32
        .mptr           B_y,        y  + 16,    32
        .mptr           A_y,        y  + 0,     32
        .mptr           A_cr,       cr + 8,     16
        .mptr           B_cr,       cr + 0,     16
        .mptr           B_cb,       cb + 8,     16
        .mptr           A_cb,       cb + 0,     16

loop:   .trip           2
        ;       ;       ;           ;           ;
  ;     ; Load the packed pixels
        LDDW    .D1T2   *A_yc++,   B_y8r8:B_y9b8
        LDDW    .D1T2   *A_yc++,   B_yArA:B_yBbA
        LDDW    .D1T2   *A_yc++,   B_yCrC:B_yDbC
        LDDW    .D1T2   *A_yc++[5],B_yErE:B_yFbE 

        LDDW    .D2T1   *B_yc++,    A_y0r0:A_y1b0
        LDDW    .D2T1   *B_yc++,    A_y2r2:A_y3b2
        LDDW    .D2T1   *B_yc++,    A_y4r4:A_y5b4
        LDDW    .D2T1   *B_yc++[5], A_y6r6:A_y7b6

        ; Do the chromas...
        PACK2          B_yErE,     B_yCrC,     B_rErC
        PACK2          B_yArA,     B_y8r8,     B_rAr8
        PACK2          A_y6r6,     A_y4r4,     A_r6r4
        PACK2          A_y2r2,     A_y0r0,     A_r2r0

        PACK2          B_yFbE,     B_yDbC,     B_bEbC
        PACK2          B_yBbA,     B_y9b8,     B_bAb8
        PACK2          A_y7b6,     A_y5b4,     A_b6b4
        PACK2          A_y3b2,     A_y1b0,     A_b2b0

        ; Do the lumas...
        PACKH2          B_yFbE,     B_yErE,     B_yFyE
        PACKH2          B_yDbC,     B_yCrC,     B_yDyC
        PACKH2          B_yBbA,     B_yArA,     B_yByA
        PACKH2          B_y9b8,     B_y8r8,     B_y9y8

        PACKH2          A_y7b6,     A_y6r6,     A_y7y6
        PACKH2          A_y5b4,     A_y4r4,     A_y5y4
        PACKH2          A_y3b2,     A_y2r2,     A_y3y2
        PACKH2          A_y1b0,     A_y0r0,     A_y1y0

        ; Store it out...
        STDW    .D2T2   B_yFyE:B_yDyC,          *B_y[1]
        STDW    .D2T2   B_yByA:B_y9y8,          *B_y++[4]
        STDW    .D1T1   A_y7y6:A_y5y4,          *A_y[1]
        STDW    .D1T1   A_y3y2:A_y1y0,          *A_y++[4]

        STDW    .D1T2   B_rErC:B_rAr8,          *A_cr++[2]
        STDW    .D2T1   A_r6r4:A_r2r0,          *B_cr++[2]
        STDW    .D2T2   B_bEbC:B_bAb8,          *B_cb++[2]
        STDW    .D1T1   A_b6b4:A_b2b0,          *A_cb++[2]

        BDEC            loop,       A_i

        .endproc

* ======================================================================== *
*   End of file, "IMG_yc_demux_be16_16.sa"                                 *
* ------------------------------------------------------------------------ *
*            Copyright (c) 2008 Texas Instruments, Incorporated.           *
*                           All Rights Reserved.                           *
* ======================================================================== *


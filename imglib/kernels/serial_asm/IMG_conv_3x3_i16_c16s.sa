* ======================================================================== *
*  TEXAS INSTRUMENTS, INC.                                                 *
*                                                                          *
*  IMGLIB-2  DSP Image/Video Processing Library                            *
*                                                                          *
*      Release:        Revision 2.0.1                                      *
*      Snapshot date:  6-May-2008                                          *
*                                                                          *
*  This library contains proprietary intellectual property of Texas        *
*  Instruments, Inc.  The library and its source code are protected by     *
*  various copyrights, and portions may also be protected by patents or    *
*  other legal protections.                                                *
*                                                                          *
*  This software is licensed for use with Texas Instruments TMS320         *
*  family DSPs.  This license was provided to you prior to installing      *
*  the software.  You may review this license by consulting the file       *
*  TI_license.PDF which accompanies the files in this library.             *
* ------------------------------------------------------------------------ *
*          Copyright (C) 2008 Texas Instruments, Incorporated.             *
*                          All Rights Reserved.                            *
* ======================================================================== *
* ===========================================================================*
*   NAME                                                                     *
*       IMG_conv_3x3_i16_c16s -- 3x3 convolution                             *
*                                                                            *
*                                                                            *
*   USAGE                                                                    *
*       This routine has the following C prototype:                          *
*                                                                            *
*       void IMG_conv_3x3_i16_c16s(const unsigned short *restrict inptr,     *
*                                        unsigned short *restrict outptr,    *
*                                                 int             x_dim,     *
*                                  const          short *restrict mask,      *
*                                                 int             shift)     *
*                                                                            *
*      inptr     :   pointer to an input array of unsigned 16 bit pixels     *
*      outptr    :   pointer to an output array of 16 bit pixels             *
*      x_dim     :   number of output pixels                                 *
*      mask      :   pointer to 16 bit filter mask.                          *
*      shift     :   user specified shift amount                             *
*                                                                            *
*   DESCRIPTION                                                              *
*      The convolution kernel accepts three rows of 'x_dim' input points     *
*      and produces one output row of 'x_dim' points using the input mask    *
*      of 3 by 3. The user defined shift value is used to shift the convo-   *
*      lution value, down to the 16-bit range. The convolution sum is also   *
*      range limited to 0..(2^40 - 1). The shift amount is non-zero for low  *
*      pass filters, and zero for high pass and sharpening filters.          *
*                                                                            *
*   TECHNIQUES                                                               *
*      The inner loop that computes the convolution sum is completely        *
*      unrolled and 4 output pixels are computed together. The mask          *
*      values are loaded and packed as double words.                         *
*      Since 40-bit intermediates are used, intermediate results will        *
*      not overflow                                                          *
*                                                                            *
*   ASSUMPTIONS                                                              *
*      - x_dim must be a multiple of 4.                                      *
*      - I/O buffers do not overlap.                                         *
*      - Input, output and mask pointers should be half word alligned.       *
*                                                                            *
*   CYCLES                                                                   *
*      34 + x_dim/4 * 18                                                     *
*      x_dim = 256, cycles = 1186                                            *
* -------------------------------------------------------------------------- *
*            Copyright (c) 2008 Texas Instruments, Incorporated.             *
*                           All Rights Reserved.                             *
* ========================================================================== *

		.sect	".text:IMG_conv_3x3_i16_c16s"
		.if     __TI_EABI__
          		 .asg    IMG_conv_3x3_i16_c16s, _IMG_conv_3x3_i16_c16s
        	.endif
		.global _IMG_conv_3x3_i16_c16s
_IMG_conv_3x3_i16_c16s:	.cproc	A_inptr, outptr, cols, mask, A_shift
		.no_mdep
		.reg		mask0, mask1, mask2, mask3, mask4, mask5, mask6, mask7
		.reg		mask8
		.reg		tmp0,	tmp1,	tmp2,	tmp3, tmp4
		.reg		pack0,	pack1,	pack2,	pack3, pack4
		.reg		tt0, tt2:tt1
		.reg		M1, M2, M3, M4
		.reg		N1, N2, N3, N4
		.reg		offset, offset1 
		.reg		line01:line00, line11:line10, line21:line20
		.reg		line03, line13, line23
		.reg		pix00, pix01, pix03
		.reg		pix10, pix11, pix13
		.reg		pix20, pix21, pix23
		.reg		temp00, temp01, temp02, temp03, temp04
		.reg		temp10, temp11, temp12, temp13, temp14
		.reg		temp20, temp21, temp22, temp23, temp24
		.reg		temp30, temp31, temp32, temp33, temp34
		.reg		chuk1:chuk0, chuk3:chuk2
		.reg		chuk7:chuk6, chuk5:chuk4, forty
		.reg		B_in1, B_in2, B_in3, A_in2, A_in3, tempZ, count	
		.reg		ah1:ah0, sign1:sign, sign3:sign2, CONST
		.reg		bh1:bh0,ch1:ch0,dh1:dh0
		.reg		sum23:sum01, sum1shift,sum0shift,sum3shift,sum2shift	
		.reg		sum32:sum10	

		; load mask
		LDH			*+mask[0],	mask0			
		LDH			*+mask[1],	mask1
		LDH			*+mask[2],	mask2
		LDH			*+mask[3],	mask3
		LDH			*+mask[4],	mask4
		LDH			*+mask[5],	mask5
		LDH			*+mask[6],	mask6
		LDH			*+mask[7],	mask7
		LDH			*+mask[8],	mask8

		; packing mask for DOTP2 operation
		PACK2		mask1,			mask0,	M1	
		PACK2		mask4,			mask3,	M2
		PACK2		mask7,			mask6,	M3
		PACK2		mask5,			mask2,	M4
		; mask8	= M5
		PACK2		mask2,			mask1,	N1
		PACK2		mask5,			mask4,	N2
		PACK2		mask8,			mask7,	N3
		PACK2		mask3,			mask0,	N4
		; mask6 = N5	
		
		; constants
		; 0x00008000
		MVKL		0x8000,			offset1
		MVKLH		0x0000,			offset1

		; 0x80008000
		SET			offset1,	31,	31,	tmp0		; 0x80008000
		; 0x0000FFFF
		SET			offset1,	0,	15,	CONST		; 0x0000FFFF

		; 0x00000028
		MVKL		0x0028,			forty
		MVKLH		0x0000,			forty

		; (signed) mask * (unsigned) 0x8000
		ADD			mask0,		mask1,		tmp1
		ADD			mask2,		mask3,		tmp2
		ADD			mask4,		mask5,		tmp3
		ADD			mask6,		mask7,		tmp4
		ADD			tmp1,		tmp2,		tt0
		ADD			tt0,		tmp3,		tt0
		ADD			tt0,		tmp4,		tt0
		ADD			tt0,		mask8,		tt0
		SHL			tt0,		15,			tt2:tt1

		; 3 rows input pointers
		SHL		cols,		1,		tempZ			; 16 bit > addressing * 2
		ADD		A_inptr,	tempZ,	A_in2	
		ADD		A_in2,		tempZ,	A_in3	
		ADD		A_inptr,	8,	B_in1				; for last 2 of 4 ...
		ADD		B_in1,		tempZ,	B_in2
		ADD		B_in2,		tempZ,	B_in3

		; counter
		SHRU	cols,		2,	count				
		SUB		count,		2,	count

loop:	
		; load 6 values
		LDNDW		*A_inptr++,	line01:line00
		LDNDW		*A_in2++,	line11:line10
		LDNDW		*A_in3++,	line21:line20
		LDNW		*B_in1++(8),	line03
		LDNW		*B_in2++(8),	line13
		LDNW		*B_in3++(8),	line23

		; change to signed values
		XOR			tmp0,		line00,		pix00
		XOR			tmp0,		line01,		pix01
		XOR			tmp0,		line10,		pix10
		XOR			tmp0,		line11,		pix11
		XOR			tmp0,		line20,		pix20
		XOR			tmp0,		line21,		pix21
		XOR			tmp0,		line03,		pix03
		XOR			tmp0,		line13,		pix13
		XOR			tmp0,		line23,		pix23

		; 1st pixel
		DOTP2		pix00,		M1,			temp00	
		DOTP2		pix10,		M2,			temp01	
		DOTP2		pix20,		M3,			temp02
		PACK2		pix11,		pix01,		pack0
		DOTP2		pack0,		M4,			temp03
		MPY			pix21,		mask8,		temp04

		; (s)(A-0x8000) * (s) mask + (s)mask * (u)0x8000
		ADD			tt2:tt1,		temp00,		chuk1:chuk0
		ADD			chuk1:chuk0,	temp01,		chuk1:chuk0
		ADD			chuk1:chuk0,	temp02,		chuk1:chuk0
		ADD			chuk1:chuk0,	temp03,		chuk1:chuk0
		ADD			chuk1:chuk0,	temp04,		chuk1:chuk0

		SHR			chuk1:chuk0,	A_shift,	ah1:ah0
		CMPLT		ah1:ah0,	0,			sign
[sign]	ZERO		ah0
		CMPGT		ah1:ah0,	CONST,		sign2
[sign2]	MV			CONST,		ah0
		; changing to signed value
		SUB			ah0,		offset1,		ah0

		; 2nd pixel

		DOTP2		pix01,		N1,			temp10	
		DOTP2		pix11,		N2,			temp11
		DOTP2		pix21,		N3,			temp12
		PACKH2		pix10,		pix00,		pack1
		DOTP2		pack1,		N4,			temp13
		MPYHL		pix20,		mask6,		temp14

		ADD			tt2:tt1,		temp10,		chuk3:chuk2
		ADD			chuk3:chuk2,	temp11,		chuk3:chuk2
		ADD			chuk3:chuk2,	temp12,		chuk3:chuk2
		ADD			chuk3:chuk2,	temp13,		chuk3:chuk2
		ADD			chuk3:chuk2,	temp14,		chuk3:chuk2

		SHR			chuk3:chuk2,	A_shift,	bh1:bh0
		CMPLT		bh1:bh0,	0,			sign
[sign]	ZERO		bh0
		CMPGT		bh1:bh0,	CONST,		sign2
[sign2]	MV 			CONST,		bh0
		; changing to signed value
		SUB			bh0,		offset1,		bh0
		
		; pack two data into one register
		SPACK2		bh0,		ah0,		sum01

		; changing to unsigned value
		XOR			sum01,		tmp0,		sum10

		; 3rd pixel
		DOTP2		pix01,		M1,			temp20	
		DOTP2		pix11,		M2,			temp21	
		DOTP2		pix21,		M3,			temp22
		PACK2		pix13,		pix03,		pack2
		DOTP2		pack2,		M4,			temp23
		MPY			pix23,		mask8,		temp24

		ADD			tt2:tt1,		temp20,		chuk5:chuk4
		ADD			chuk5:chuk4,	temp21,		chuk5:chuk4
		ADD			chuk5:chuk4,	temp22,		chuk5:chuk4
		ADD			chuk5:chuk4,	temp23,		chuk5:chuk4
		ADD			chuk5:chuk4,	temp24,		chuk5:chuk4

		SHR			chuk5:chuk4,	A_shift,	ch1:ch0
		CMPLT		ch1:ch0,	0,			sign
[sign]	ZERO		ch0
		CMPGT		ch1:ch0,	CONST,			sign2
[sign2]	MV	 		CONST,		ch0
		;changing to signed value
		SUB			ch0,		offset1,		ch0


		; 4th pixel

		DOTP2		pix03,		N1,			temp30	
		DOTP2		pix13,		N2,			temp31
		DOTP2		pix23,		N3,			temp32
		PACKH2		pix11,		pix01,		pack3
		DOTP2		pack3,		N4,			temp33
		MPYHL		pix21,		mask6,		temp34

		ADD			tt2:tt1,		temp30,		chuk7:chuk6
		ADD			chuk7:chuk6,	temp31,		chuk7:chuk6
		ADD			chuk7:chuk6,	temp32,		chuk7:chuk6
		ADD			chuk7:chuk6,	temp33,		chuk7:chuk6
		ADD			chuk7:chuk6,	temp34,		chuk7:chuk6

		SHR			chuk7:chuk6,	A_shift,	dh1:dh0
		CMPLT		dh1:dh0,	0,				sign
[sign]	ZERO		dh0
		CMPGT		dh1:dh0,	CONST,		sign2
[sign2]	MV   		CONST,		dh0
		; changin to signed value
		SUB			dh0,		offset1,		dh0

		; pack two values into one register
		SPACK2		dh0,		ch0,	sum23
		; changing to unsigned value
		XOR			sum23,		tmp0,	sum32

		STNDW		sum32:sum10, *outptr++	

		BDEC		loop,	count

		.return;
		.endproc

* ========================================================================= *
*    End of file:  IMG_conv_3x3_i16_c16s.sa                                 *
*  ------------------------------------------------------------------------ *
*              Copyright (c) 2008 Texas Instruments, Incorporated.          *
*                             All Rights Reserved.                          *
*  ======================================================================== *
